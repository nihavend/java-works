
- do not user previous context start fresh

- name of java file LookupObjectsToRedisExporter

- use below helpers for connection properties	

	import com.tabii.utils.CommonUtils;
	import com.tabii.utils.PgProperties;
	import com.tabii.utils.RedisProperties;
    PgProperties pgProperties = CommonUtils.getPgConnectionProps();
    RedisProperties redisProperties = CommonUtils.getRedisConnectionProps();

    try (Connection pgConn = DriverManager.getConnection(
                 pgProperties.getDbUrl(), pgProperties.getDbUser(), pgProperties.getDbPassword());
         JedisPool jedisPool = new JedisPool(redisProperties.getHost(), redisProperties.getPort());
         Jedis jedis = jedisPool.getResource()) {

- read a pg table named lookup_objects 

    id bigint NOT NULL,
    type text COLLATE pg_catalog."default" NOT NULL,
    audit json,
    body json,
    fields json,
    isactive boolean,
    metadata json,
    paths json,
    path text COLLATE pg_catalog."default",
    published json,
    site text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default",
    viewcount bigint,
    audit_user_id bigint,
    
- write each type to corresponding redis key as type:id according to following rules



- for type is "exclusive-badge" : use this schema for destination redis value
                    "exclusiveBadges": [
                        {
                            "exclusiveBadgeType": "originals"
                        }
                    ],

- there is images table with columns
  id integer NOT NULL DEFAULT nextval('images_id_seq'::regclass),
    image_type text COLLATE pg_catalog."default",
    filename text COLLATE pg_catalog."default",
    title text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",

- for badges search within nested nodes that have type image and put that images ids into array images array. find ids from images table wtih filename

e.g :
        "cover_image": {
            "url": "https://cms-tabii-public-image.tabii.com/int/27834_0-0-4319-2099.jpeg",
            "title": "Kuzgun Dipsiz KaranlÄ±k Cover Image",
            "type": "image",
            "fileName": "27834_0-0-4319-2099.jpeg"
        },
        
        

- for type is "badges"  : use this schema for destination redis value :  attributes may be parsed from fields column of corresponding type with matching id
                        {
                            "bannerLocation": "upLogo",
                            "id": 182921,
                            "images": [id_of_image],
                            "showLocation": "leftTop",
                            "title": "tabii original series",
                            "type": "icon"
                        }

- for genre search within nested nodes that have type image and put that images ids into array images array. find ids from images table wtih filename

- for type is "genre"  : use this schema for destination redis value : attributes may be parsed from fields column of corresponding type with matching id
                        {
                            "contentType": "genre",
                            "id": 149704,
                            "images": [id_of_image],
                            "title": "Crime"
                        },
                    
   
   
   sample fields column
   
   {"layout": {"key": "icon", "value": "Icon", "metadata": {}}, "badge_image": {"url": "https://cms-tabii-public-image.tabii.com/int/26087.jpeg", "type": "image", "title": "Tabii Original Badges", "fileName": "26087.jpeg"}, "display_title": {"text": "tabii original program"}, "banner_location": {"key": "on_top_of_the_logo", "value": "On Top Of The Logo", "metadata": {}}, "show_card_location": {"key": "upper_left_corner", "value": "Upper Left Corner", "metadata": {}}}
   
      
   
- do not filter isActive

- change value of show_card_location according to below mapping function before transforming to showLocation

- change value of banner_location according to below mapping function before transforming to bannerLocation

- mapping function :
      private static String mapLocation(String key) {
        switch (key) {
            case "upper_right_corner":
                return "rightTop";
            case "upper_left_corner":
                return "leftTop";
            case "lower_left_corner":
                return "leftBottom";
            case "on_top_of_the_logo":
                return "upLogo";
            case "under_the_logo":
                return "bottomLogo";
            case "do_not_show":
            default:
                return "invisible";
        }
    }
