Write a complete Java program named MongoToPostgresContentExporter that migrates data from a MongoDB collection "shows" to PostgreSQL table "contents" with related tables. 

Requirements:

1. Connect to MongoDB (URI, database, collection) and PostgreSQL (JDBC URL, user, password) using simple properties classes.

2. PostgreSQL schema:
   - contents(id bigint primary key, title text, description text, spot text, made_year integer, content_type text, exclusiveBadges json)
   - content_images(content_id bigint, image_id integer)
   - content_genres(content_id bigint, genre_id bigint)
   - content_badges(content_id bigint, badge_id bigint)
   - images(id integer primary key, filename text unique)
   - lookup_objects(id integer primary key, type text, typeid bigint)
   - content_lookup_relations(content_id bigint, lookup_id integer)

3. Read documents from MongoDB "shows" collection.

4. Handle the following for each show document:

   a) Optional fields inside "fields" object: 
      - "spot", "made_year", "language", "rating" etc.
      - "made_year" and other numbers may be nested with "$numberLong" (MongoDB Extended JSON).
      - Use a helper function to safely extract String, Integer, Long, or nested Document values.

   b) exclusive_badge (array inside fields) must be transformed to "exclusiveBadges" column in contents:
      - Each item: {"title": "Originals", ...} → {"exclusiveBadgeType": "originals"} (lowercase title)
      - If missing, store empty array "[]".

   c) Images: any nested object with type="image" must map via filename to images table.
      - Insert relation into content_images table (content_id, image_id)
      - Log missing images with full path in document.

   d) Lookup relations: any nested object with type in ["parental-guide","age-restriction","category","exclusive-badge","badge","genre","badges"]:
      - Map type → lookup_objects.typeid
      - Insert into correct relation table (content_genres, content_badges, or content_lookup_relations)
      - Log missing lookup objects with full path.

5. All nested structures must be flattened recursively, and logging must include the JSON path for missing relations or images.

6. Use PreparedStatements for all SQL inserts and handle nulls safely.

7. Implement helper functions:
   - getFieldValue(Document doc, String key, Class<?> type): returns value as String, Integer, Long, or nested Document JSON safely.
   - transformExclusiveBadges(Object exclusiveBadgeObj): converts Mongo exclusive_badge array to simplified JSON array.
   - getLongFromDocument(Document doc, String key): parses nested "$numberLong" fields.
   - flattenWithPaths(Document doc, String path): recursively flattens document and tracks JSON path.
   - insertRelation(Connection pgConn, String table, String col1, String col2, Long id1, Long id2)

8. Catch exceptions, log warnings, and continue processing remaining documents.

9. Make the program compile-ready for Java 17+ and MongoDB Driver 4.11+.

10. Keep code clean, modular, and maintainable.
